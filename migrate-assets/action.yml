name: "migrate-assets"
description: "POST/PATCH UiPath assets from assets.values.json; outputs migrated_ok and migrated_fail CSVs"


runs:
  using: "composite"
  steps:
  - name: Download results artifact
    uses: actions/download-artifact@v4
    with:
          name: assets
    continue-on-error: true

  - name: Migrate assets (POST/PATCH from list)
    shell: bash
    env:
      FOLDER:  ${{ inputs.target_folder_name }}
    run: |
      set -euo pipefail
      test -f assets.json

      ok=()
      fail=()

      total=$(jq 'length' assets.json)
      echo "Migrating ${total} assets..."

      for ((i=0; i<total; i++)); do
        body=$(jq -c ".[$i]" assets.json)
        name=$(jq -r '.Name' <<<"$body")

        # Find existing asset Id
        id=$(
          curl -sS -L \
            -H "Authorization: Bearer ${TOKEN}" \
            -H "X-UIPATH-FolderPath: ${FOLDER}" \
            --get --data-urlencode "\$filter=Name eq '$name'" \
            "${OR_URL}/odata/Assets" \
          | jq -r '.value[0].Id // empty'
        )

        # Upsert
        if [[ -n "$id" ]]; then
          status=$(
            curl -L -sS \
              --connect-timeout 10 --max-time 120 \
              --write-out '%{http_code}' --output /dev/null \
              -X PATCH \
              -H "Authorization: Bearer ${TOKEN}" \
              -H "Content-Type: application/json" \
              -H "X-UIPATH-FolderPath: ${FOLDER}" \
              --data-binary "$body" \
              "${OR_URL}/odata/Assets(${id})"
          )
        else
          status=$(
            curl -L -sS \
              --connect-timeout 10 --max-time 120 \
              --write-out '%{http_code}' --output /dev/null \
              -X POST \
              -H "Authorization: Bearer ${TOKEN}" \
              -H "Content-Type: application/json" \
              -H "X-UIPATH-FolderPath: ${FOLDER}" \
              --data-binary "$body" \
              "${OR_URL}/odata/Assets"
          )
        fi

        echo "[$((i+1))/${total}] ${name} -> ${status}"

        if [[ ${status:-0} -ge 200 && ${status:-0} -lt 400 ]]; then
          ok+=("$name")
        else
          fail+=("$name")
        fi
      done

      ok_csv=$(IFS=,; echo "${ok[*]-}")
      fail_csv=$(IFS=,; echo "${fail[*]-}")

      echo "Migrated OK:   ${ok_csv}"
      echo "Migrated FAIL: ${fail_csv}"

      echo "migrated_ok=${ok_csv}"     >> "$GITHUB_OUTPUT"
      echo "migrated_fail=${fail_csv}" >> "$GITHUB_OUTPUT"
