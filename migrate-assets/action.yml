name: "migrate-assets"
description: "POST/PATCH UiPath assets from assets.values.json; outputs migrated_ok and migrated_fail CSVs"
inputs:
  folder_name:
    description: "X-UIPATH-FolderPath value"
    required: true
  asset_names:
    description: "CSV of all asset names from parse step"
    required: true
  target:
    description: "target env to migrate to"
    required: true
outputs:
  migrated:
    value: ${{ steps.migrate.outputs.migrated }}
    description: ""
  not_migrated:
      value: ${{ steps.migrate.outputs.not_migrated }}
      description: ""
runs:
  using: "composite"
  steps:
  - name: Download results artifact
    uses: actions/download-artifact@v4
    with:
          name: assets
    continue-on-error: true

  - uses: actions/download-artifact@v4
    with:
      name: migration-state
    continue-on-error: true



  - name: Migrate assets
    id: migrate
    shell: bash
    run: |
      set -euo pipefail
      
      if [[ ! -f state.json ]]; then
        echo 'Initializing state.json (first matrix run)â€¦'
        printf '%s\n' '{ "envs": {} }' > state.json
      fi



      test -f assets.json

      ok=()
      fail=()

      total=$(jq 'length' assets.json)
      echo "Migrating ${total} assets..."

      for ((i=0; i<total; i++)); do
        body=$(jq -c ".[$i]" assets.json)
        name=$(jq -r '.Name' <<<"$body")

        id=$(
          curl -sS -L \
            -H "Authorization: Bearer ${{ env.TOKEN}}" \
            -H "X-UIPATH-FolderPath: ${{ inputs.folder_name }}" \
            --get --data-urlencode "\$filter=Name eq '$name'" \
            "${OR_URL}/odata/Assets" \
          | jq -r '.value[0].Id // empty'
        )
        echo " asset id: $id"

        if [[ -n "$id" ]]; then
          body_with_id="$(jq -c --arg id "$id" '. + {Id: ($id|tonumber)}' <<<"$body")"
          response="$(mktemp)"
          trap 'rm -f "$response"' EXIT
          status=$(
            curl -L -sS \
              --connect-timeout 10 --max-time 120 \
              --output "$response" \
              --write-out '%{http_code}' \
              -X PUT \
              -H "Authorization: Bearer ${{ env.TOKEN}}" \
              -H "Content-Type: application/json" \
              -H "X-UIPATH-FolderPath: ${{ inputs.folder_name }}" \
              --data-binary  "$body_with_id" \
              "${OR_URL}/odata/Assets(${id})"
          )
          echo "PUT response: $status"
          echo "::group::Response body"
          if [[ -s "$response" ]] && command -v jq >/dev/null && jq -e . "$response" >/dev/null 2>&1; then
            jq -r . "$response"
          else
            cat "$response"
          fi
          echo "::endgroup::"
        else
          response="$(mktemp)"
          trap 'rm -f "$response"' EXIT
          status=$(
            curl -L -sS \
              --connect-timeout 10 --max-time 120 \
              --output "$response" \
              --write-out '%{http_code}' \
              -X POST \
              -H "Authorization: Bearer ${{ env.TOKEN }}" \
              -H "Content-Type: application/json" \
              -H "X-UIPATH-FolderPath: ${{ inputs.folder_name }}" \
              --data-binary "$body" \
              "${OR_URL}/odata/Assets"
          )
          echo "Post Response: $status"
          echo "::group::Response body"
          if [[ -s "$response" ]] && command -v jq >/dev/null && jq -e . "$response" >/dev/null 2>&1; then
            jq -r . "$response"
          else
            cat "$response"
          fi
          echo "::endgroup::"
        fi

        echo "[$((i+1))/${total}] ${name} -> ${status}"

        if [[ ${status:-0} -ge 200 && ${status:-0} -lt 400 ]]; then
          ok+=("$name")
        else
          fail+=("$name")
        fi
      done

      ok_json=$(printf '%s\n' "${ok[@]:-}"   | jq -R . | jq -s .)
      fail_json=$(printf '%s\n' "${fail[@]:-}" | jq -R . | jq -s .)

      jq --arg e "${{ inputs.target }}" --argjson newok "$ok_json" --argjson newfail "$fail_json" '
        .envs[$e].ok     = ((.envs[$e].ok     // []) + $newok  | unique) |
        .envs[$e].failed = ((.envs[$e].failed // []) + $newfail| unique)
      ' state.json > state.new.json

      mv state.new.json state.json

  - name: Upload updated state
    uses: actions/upload-artifact@v4
    with:
        name: migration-state
        path: state.json
        overwrite: true

