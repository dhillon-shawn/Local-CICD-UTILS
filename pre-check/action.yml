name: "Pre-check"
description: "Decide target_env, sha, rc_tag, pr_num"
branding:
  icon: "package"
  color: "purple"
outputs:
  target_env:
    value: ${{ steps.decide.outputs.target_env }}
    description: ""
  sha:
    value: ${{ steps.decide.outputs.sha }}
    description: ""
  rc_tag:
    value: ${{ steps.decide.outputs.rc_tag }}
    description: ""
  pr_num:
    value: ${{ steps.decide.outputs.pr_num }}
    description: ""
  promote:
    value: ${{ steps.decide.outputs.promote }}
    description: ""

runs:
  using: "composite"
  steps:
  - name: pre check
    id: decide
    uses: actions/github-script@v7
    with:
      script: |
        const out = { target_env: '', sha: '', rc_tag: '', pr_num: '', promote: 'false' };
        const hasLabel = (pr, name) =>
          (pr.labels || []).some(l => String(l.name || '').toLowerCase() === name);

        if (context.eventName === 'push') {
          const { owner, repo } = context.repo;

      
          const ref = context.ref || context.payload?.ref || '';
          const branch = ref.replace(/^refs\/heads\//, '');

 
          let defaultBranch = context.payload?.repository?.default_branch;
          if (!defaultBranch) {
            const repoInfo = await github.rest.repos.get({ owner, repo });
            defaultBranch = repoInfo.data.default_branch || 'main';
          }

          if (branch === defaultBranch) {

            out.target_env = '';
            out.sha        = '';
            out.rc_tag     = '';
            out.pr_num     = '';
            out.promote    = 'false';
          } else {
   
            const assoc = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner, repo, commit_sha: context.sha
            });
            if (!assoc.data?.length) {
              core.setFailed(`Pre-check: no PR found for push sha=${context.sha}`);
              return;
            }
            const pr = assoc.data.find(p => !p.draft) || assoc.data[0];

            out.pr_num     = String(pr.number);
            out.rc_tag     = `rc-pr-${out.pr_num}`;
            out.sha        = context.sha;
            out.target_env = pr.draft ? 'dev' : 'test';
            out.promote    = 'false'; // pushes always stage (dev/test)
          }

        } else if (context.eventName === 'pull_request') {

          const pr     = context.payload.pull_request;
          const action = context.payload.action || '';

          if (action === 'ready_for_review') {

            out.pr_num     = String(pr.number);
            out.rc_tag     = `rc-pr-${out.pr_num}`;
            out.target_env = 'test';
            out.sha        = pr.head.sha;
            out.promote    = 'true';

          } else if (action === 'closed') {
            if (!pr.merged) {

              out.target_env = '';
              out.sha        = '';
              out.promote    = 'false';
            } else {

              const isRelease = hasLabel(pr, 'release');
              const isProcess = hasLabel(pr, 'process');
              const isLibrary = hasLabel(pr, 'library');
              const isHotfix  = hasLabel(pr, 'hotfix');

              out.pr_num = String(pr.number);
              out.rc_tag = `rc-pr-${out.pr_num}`;

              if (isRelease && isProcess) {
                out.target_env = 'prod';
                out.sha        = '';
                out.promote    = 'true';
              } else if (isRelease && isLibrary) {
                out.target_env = 'prod-bypass';
                out.sha        = '';
                out.promote    = 'true';
              } else if (isHotfix) {
                out.target_env = 'prod-bypass';
                out.sha        = pr.merge_commit_sha || '';
                out.promote    = 'false';
              } else {
                // Other merged PRs => no-op
                out.target_env = '';
                out.sha        = '';
                out.promote    = 'false';
              }
            }
          } else {
            out.target_env = '';
            out.sha        = '';
            out.promote    = 'false';
          }

        } else {
          out.target_env = '';
          out.sha        = '';
          out.promote    = 'false';
        }

        core.setOutput('target_env', out.target_env);
        core.setOutput('sha', out.sha);
        core.setOutput('rc_tag', out.rc_tag);
        core.setOutput('pr_num', out.pr_num);
        core.setOutput('promote', out.promote);

        console.log('pre-check:', out);

        await core.summary.addRaw([
          '### Pre-check decision',
          `- event: \`${context.eventName}\` / action: \`${context.payload?.action || ''}\``,
          `- target_env: \`${out.target_env}\``,
          `- promote: \`${out.promote}\``,
          `- pr_num: \`${out.pr_num}\``,
          `- rc_tag: \`${out.rc_tag}\``,
          `- sha: \`${out.sha}\``,
        ].join('\n')).write();



  - name: Write merge meta (only on merged PRs)
    if: github.event.pull_request.merged == true
    uses: dhillon-shawn/Local-CICD-UTILS/pr-merge@v0
