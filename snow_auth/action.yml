name: "Auth with Service Now"
description: "Assume role, fetch secret, map credentials, fetch token"
branding:
  icon: "package"
  color: "purple"


runs:
  using: "composite"
  steps:

    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
        aws-region: "us-west-2"

    - name: Get secret JSON as env
      uses: aws-actions/aws-secretsmanager-get-secrets@v2
      with:
        secret-ids: |
          CR,${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
        parse-json-secrets: true


    - name: Get Token
      shell: bash
      run: |
          echo "GEtting Snow Token"
          body="$(mktemp)"
          trap 'rm -f "$body"' EXIT

          curl_rc=0
          status=$(
            curl -L -sS \
              --connect-timeout 10 --max-time 120 \
              --output "$body" \
              --write-out '%{http_code}' \
              -X POST \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data-urlencode 'grant_type=password' \
              --data-urlencode 'client_id=${{env.CR_SNOW_CLIENT_ID}}' \
              --data-urlencode 'client_secret=${{env.CR_SNOW_CLIENT_SECRET}}' \
              --data-urlencode 'username=${{env.CR_SNOW_USER}}' \
              --data-urlencode 'password=${{env.CR_SNOW_PASS}}' \
              "${{env.CR_SNOW_BASE_URL}}/oauth_token.do"
          ) || curl_rc=$?

          echo "Status Code: $status"
          echo "::group::Response body"
          if command -v jq >/dev/null; then jq -r . "$body" || cat "$body"; else cat "$body"; fi
          echo "::endgroup::"

          
          token="$(jq -r '.access_token // empty' "$body" 2>/dev/null || true)"
          echo "TOKEN=$token" >> "$GITHUB_ENV"
          
          if [[ $curl_rc -ne 0 || ${status:-0} -ge 400 ]]; then
            exit 1
          fi
