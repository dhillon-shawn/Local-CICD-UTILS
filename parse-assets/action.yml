name: "UiPath Assets: scan to JSON"
description: "Find UiPath asset names from XAML and Data/Config.xlsx, output assets.json"
outputs:
  assets_json_path:
    description: "Path to generated assets.json"
    value: ${{ steps.scan.outputs.assets_json_path }}

runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install minimal deps
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install lxml openpyxl

    - name: Scan UiPath assets
      id: scan
      shell: python
      run: |
        # --- imports ---
        from pathlib import Path
        import json, re, os
        from lxml import etree
        from openpyxl import load_workbook

        # --- helpers ---
        def n(tag):  # strip namespace
            return tag.split('}', 1)[1] if '}' in tag else tag

        STRS = re.compile(r'["\']([^"\']+)["\']')
        def pick_strings(s):
            if not s: return set()
            return {m.group(1).strip() for m in STRS.finditer(s)}

        # --- Excel (Assets sheet) ---
        def read_excel():
            out = {}
            for x in Path('.').rglob('Config.xlsx'):
                if '.git' in x.parts: continue
                try:
                    wb = load_workbook(str(x), data_only=True)
                except Exception:
                    continue
                sh = next((wb[s] for s in wb.sheetnames if s.strip().lower()=='assets'), None)
                if not sh: continue

                # header (first non-empty row)
                hdr = None
                for r in sh.iter_rows(min_row=1, max_row=5, values_only=True):
                    if any(c not in (None,'') for c in r):
                        hdr = [str(c).strip().lower() if c else '' for c in r]; break
                if not hdr: continue

                def col(key):
                    for i,h in enumerate(hdr):
                        if key in h: return i
                    return -1

                i_name = col('name'); i_type = col('type')
                if i_name == -1: i_name = 0  # fallback to col A

                for r in sh.iter_rows(min_row=2, values_only=True):
                    if not r or i_name >= len(r): continue
                    cell = r[i_name]
                    if not cell: continue
                    name = str(cell).strip()
                    typ  = 'Unknown'
                    if i_type != -1 and i_type < len(r) and r[i_type]:
                        typ = str(r[i_type]).strip()
                    out[name] = typ
            return out  # {name:type}

        # --- XAML (GetAsset, GetRobotAsset, GetCredential) ---
        def read_xaml():
            all_names, cred_names = set(), set()
            ACTS = {'GetAsset', 'GetRobotAsset', 'GetCredential'}
            KEYS = ('AssetName','Asset','Name')
            SUF  = ('AssetName','Asset')

            for p in Path('.').rglob('*.xaml'):
                if '.git' in p.parts: continue
                raw = p.read_text(encoding='utf-8', errors='ignore')
                try:
                    root = etree.fromstring(raw.encode('utf-8'),
                                            parser=etree.XMLParser(recover=True, huge_tree=True))
                except Exception:
                    continue

                for e in root.iter():
                    tag = n(e.tag)
                    if tag not in ACTS and not any(tag.endswith(a) for a in ACTS): 
                        continue
                    is_cred = (tag == 'GetCredential' or tag.endswith('GetCredential'))
                    # attributes
                    for k,v in e.attrib.items():
                        key = n(k)
                        if key in KEYS or key.endswith(SUF):
                            for name in pick_strings(v):
                                all_names.add(name)
                                if is_cred: cred_names.add(name)
                    # child props
                    for c in e:
                        key = n(c.tag)
                        if key in KEYS or key.endswith(SUF) or '.AssetName' in key or '.Asset' in key:
                            val = (c.text or '').strip()
                            vals = {val} if val and '[' not in val and ']' not in val else pick_strings(val)
                            for name in vals:
                                all_names.add(name)
                                if is_cred: cred_names.add(name)
            return all_names, cred_names

        # --- merge + classify ---
        ex = read_excel()                 # {name:type}
        x_all, x_creds = read_xaml()      # sets
        cred_from_excel = {n for n,t in ex.items() if t.lower() == 'credential'}
        credentials = x_creds | cred_from_excel
        migratable  = (set(ex) | x_all) - credentials

        out = {
          'migratable':  sorted(migratable,  key=str.casefold),
          'credentials': sorted(credentials, key=str.casefold)
        }

        path = Path(os.getenv('GITHUB_WORKSPACE','.')) / 'assets.json'
        path.write_text(json.dumps(out, indent=2), encoding='utf-8')

        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f'assets_json_path={path}\n')



