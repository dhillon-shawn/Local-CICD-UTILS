name: "UiPath Assets: scan to JSON"
description: "Find UiPath asset names from XAML and Data/Config.xlsx, output assets.json"
outputs:
  assets_json_path:
    description: "Path to generated assets.json"
    value: ${{ steps.scan.outputs.assets_json_path }}

runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install minimal deps
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install lxml openpyxl

    - name: Scan UiPath assets
      id: scan
      shell: python
      run: |
        # --- imports ---
        from pathlib import Path
        import json, re
        from lxml import etree
        from openpyxl import load_workbook
        import os

        # --- small helpers ---
        def strip_ns(tag: str) -> str:
            """Remove '{ns}' from '{ns}LocalName' -> 'LocalName'."""
            return tag.split('}', 1)[1] if '}' in tag else tag

        STRS = re.compile(r'["\']([^"\']+)["\']')
        def find_strings(text: str | None) -> set[str]:
            """Return all quoted string literals in a VB/XAML expression."""
            if not text: return set()
            return {m.group(1).strip() for m in STRS.finditer(text)}

        # --- Excel: read Assets sheet (Name + Type) ---
        def read_excel_assets() -> dict[str, str]:
            names: dict[str, str] = {}
            for x in Path(".").rglob("Config.xlsx"):
                if ".git" in x.parts: 
                    continue
                try:
                    wb = load_workbook(str(x), data_only=True)
                except Exception:
                    continue
                sheet = next((wb[s] for s in wb.sheetnames if s.strip().lower() == "assets"), None)
                if not sheet:
                    continue

                # header: take first non-empty row in top 5
                header = None
                for row in sheet.iter_rows(min_row=1, max_row=5, values_only=True):
                    if any(c not in (None, "") for c in row):
                        header = [str(c).strip().lower() if c else "" for c in row]
                        break
                if not header:
                    continue

                def col(want: str) -> int:
                    for i, h in enumerate(header):
                        if want in h:
                            return i
                    return -1

                i_name = col("name")
                i_type = col("type")
                if i_name == -1:
                    i_name = 0  # fall back to col A

                for row in sheet.iter_rows(min_row=2, values_only=True):
                    if not row or i_name >= len(row):
                        continue
                    name_cell = row[i_name]
                    if not name_cell:
                        continue
                    name = str(name_cell).strip()
                    atype = "Unknown"
                    if i_type != -1 and i_type < len(row) and row[i_type]:
                        atype = str(row[i_type]).strip()
                    names[name] = atype
            return names  # {name: type}

        # --- XAML: find GetAsset / GetCredential names ---
        def read_xaml_assets() -> tuple[set[str], set[str]]:
            all_names: set[str] = set()
            cred_names: set[str] = set()

            for p in Path(".").rglob("*.xaml"):
                if ".git" in p.parts:
                    continue
                raw = p.read_text(encoding="utf-8", errors="ignore")
                try:
                    root = etree.fromstring(raw.encode("utf-8"), parser=etree.XMLParser(recover=True, huge_tree=True))
                except Exception:
                    continue

                for elem in root.iter():
                    tag = strip_ns(elem.tag)
                    is_get_asset = (tag == "GetAsset" or tag.endswith("GetAsset"))
                    is_get_cred  = (tag == "GetCredential" or tag.endswith("GetCredential"))
                    if not (is_get_asset or is_get_cred):
                        continue

                    # attributes like AssetName/Asset/Name
                    for k, v in elem.attrib.items():
                        key = strip_ns(k)
                        if key in ("AssetName", "Asset", "Name") or key.endswith(("AssetName", "Asset")):
                            for n in find_strings(v):
                                all_names.add(n)
                                if is_get_cred:
                                    cred_names.add(n)

                    # child elements like <ui:GetAsset.AssetName>MyAsset</...>
                    for child in elem:
                        key = strip_ns(child.tag)
                        if key in ("AssetName", "Asset", "Name") or key.endswith(("AssetName", "Asset")) or ".AssetName" in key or ".Asset" in key:
                            val = (child.text or "").strip()
                            vals = {val} if val and "[" not in val and "]" not in val else find_strings(val)
                            for n in vals:
                                all_names.add(n)
                                if is_get_cred:
                                    cred_names.add(n)

            return all_names, cred_names

        # --- main: merge + classify ---
        excel_map = read_excel_assets()          # {name: type}
        xaml_all, xaml_creds = read_xaml_assets()

        cred_from_excel = {n for n, t in excel_map.items() if t.lower() == "credential"}
        credentials = set(xaml_creds) | cred_from_excel
        migratable = (set(excel_map) | xaml_all) - credentials

        out = {
            "migratable": sorted(migratable, key=str.casefold),
            "credentials": sorted(credentials, key=str.casefold),
        }

        out_path = Path(os.getenv("GITHUB_WORKSPACE", ".")) / "assets.json"
        out_path.write_text(json.dumps(out, indent=2), encoding="utf-8")

        # expose the file path as an output
        with open(os.environ["GITHUB_OUTPUT"], "a") as f:
            f.write(f"assets_json_path={out_path}\n")

    - name: Scan UiPath assets
      shell: bash
      run: |
        "${{ github.action_path }}/scan-assets.py"
        echo "assets_json_path=$GITHUB_WORKSPACE/assets.json" >> $GITHUB_OUTPUT

