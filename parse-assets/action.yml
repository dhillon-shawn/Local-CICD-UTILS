name: "parse-assets"
description: "Parse UiPath assets (XAML + Data/Config.xlsx) and output CSV name lists"
outputs:
    text_names:
        description: "CSV of Text asset names"
        value: ${{ steps.scan.outputs.text_names }}
    int_names:
        description: "CSV of Integer asset names"
        value: ${{ steps.scan.outputs.int_names }}
    bool_names:
        description: "CSV of Bool asset names"
        value: ${{ steps.scan.outputs.bool_names }}
    credential_names:
        description: "CSV of Credential asset names"
        value: ${{ steps.scan.outputs.credential_names }}
runs:
  using: "composite"
  steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install deps
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install lxml openpyxl

    - name: Scan (CSV outputs)
      id: scan
      shell: python
      run: |
        from pathlib import Path
        import json, re, os
        from lxml import etree
        from openpyxl import load_workbook

        def strip_ns(t): return t.split("}",1)[1] if "}" in t else t
        LITS = re.compile(r'["\']([^"\']+)["\']')
        def qlits(s): return set(m.group(1).strip() for m in LITS.finditer(s or ""))

        def take_attr(v):
          if not v: return set()
          if any(ch in v for ch in '[]"\''):
            lit = qlits(v)
            return lit if lit else ({v.strip()} if v.strip() else set())
          return {v.strip()} if v.strip() else set()

        # Excel: Name + Type
        types = {}
        for x in Path(".").rglob("Config.xlsx"):
          if ".git" in x.parts: continue
          try:
            wb = load_workbook(str(x), data_only=True)
          except Exception:
            continue
          sh = next((wb[s] for s in wb.sheetnames if s.strip().lower()=="assets"), None)
          if not sh: continue
          hdr=None
          for r in sh.iter_rows(min_row=1, max_row=5, values_only=True):
            if any(c not in (None,"") for c in r):
              hdr=[str(c).strip().lower() if c else "" for c in r]; break
          def col(key):
            if not hdr: return -1
            for i,h in enumerate(hdr):
              if key in h: return i
            return -1
          i_name = col("name"); i_type = col("type")
          if i_name == -1: i_name = 0
          for r in sh.iter_rows(min_row=2, values_only=True):
            if not r or i_name>=len(r): continue
            n = r[i_name]
            if not n: continue
            name = str(n).strip()
            if not name: continue
            t="Unknown"
            if i_type!=-1 and i_type<len(r) and r[i_type]:
              t=str(r[i_type]).strip()
            types[name]=t

        # XAML: GetAsset / GetRobotAsset / GetCredential
        all_names=set(); cred_names=set()
        for p in Path(".").rglob("*.xaml"):
          if ".git" in p.parts: continue
          raw = p.read_text(encoding="utf-8", errors="ignore")
          try:
            root = etree.fromstring(raw.encode("utf-8"), parser=etree.XMLParser(recover=True, huge_tree=True))
          except Exception:
            continue
          for e in root.iter():
            tag = strip_ns(e.tag)
            is_ga = tag=="GetAsset" or tag.endswith("GetAsset")
            is_gr = tag=="GetRobotAsset" or tag.endswith("GetRobotAsset")
            is_gc = tag=="GetCredential" or tag.endswith("GetCredential")
            if not (is_ga or is_gr or is_gc): continue
            for k,v in e.attrib.items():
              kk=strip_ns(k)
              if kk in ("AssetName","Asset","Name") or kk.endswith(("AssetName","Asset")):
                for n in take_attr(v):
                  all_names.add(n); 
                  if is_gc: cred_names.add(n)
            for c in e:
              kk=strip_ns(c.tag)
              if kk in ("AssetName","Asset","Name") or kk.endswith(("AssetName","Asset")) or ".AssetName" in kk or ".Asset" in kk:
                txt=(c.text or "").strip()
                vals={txt} if txt and "[" not in txt and "]" not in txt else qlits(txt)
                for n in vals:
                  all_names.add(n); 
                  if is_gc: cred_names.add(n)

        # Build type buckets (exclude credentials)
        migratable = (set(types) | all_names) - cred_names
        text, integer, boolean = set(), set(), set()
        for n in migratable:
          t = types.get(n,"Unknown").lower()
          if t.startswith("int"): integer.add(n)
          elif t.startswith("bool"): boolean.add(n)
          elif t.startswith("text"): text.add(n)
          else: text.add(n)

        def to_csv(s): 
          return ",".join(sorted(s, key=str.casefold))

        # Outputs (CSV strings). Also include credentials (info only)
        out = {
          "text_names": to_csv(text),
          "int_names": to_csv(integer),
          "bool_names": to_csv(boolean),
          "credential_names": to_csv(cred_names),
        }
        for k,v in out.items():
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
            f.write(f"{k}={v}\n")


