name: "get-assets"
description: "Batch GET UiPath asset values (Text/Integer/Bool) and write assets.values.json"
inputs:
  folder_name:    { description: "X-UIPATH-FolderPath value", required: true }
  asset_filter:  { description: "", required: true }
runs:
  using: "composite"
  steps:


    - name: GET values and build assets.values.json
      shell: bash
      run: |
        set -euo pipefail
        echo "checking release"
        body="$(mktemp)"
        trap 'rm -f "$body"' EXIT

        curl_rc=0
        status=$(
          curl -L -sS \
            --connect-timeout 10 --max-time 120 \
            --output "$body" \
            --write-out '%{http_code}' \
            -H "Authorization: Bearer ${{ env.TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "X-UIPATH-FolderPath: ${{ inputs.folder_name }}" \
            --data-urlencode "\$filter=ValueType eq 'Text' and ${{inputs.asset_filter}}" \
            --data-urlencode "\$select=Name,StringValue" \
            "${{ env.OR_URL }}/odata/Assets/UiPath.Server.Configuration.OData.GetFiltered"
        ) || curl_rc=$?

        echo "Status Code: $status"
        echo "::group::Response body"
        if [[ -s "$body" ]] && command -v jq >/dev/null && jq -e . "$body" >/dev/null 2>&1; then
          jq -r . "$body"
        else
          cat "$body"
        fi
        echo "::endgroup::"
        
        if [[ $curl_rc -ne 0 || ${status:-0} -ge 400 ]]; then
          exit 1
        fi

    - name: GET values and build assets.values.json
      shell: bash
      run: |
        set -euo pipefail
        echo "checking release"
        body="$(mktemp)"
        trap 'rm -f "$body"' EXIT

        curl_rc=0
        status=$(
          curl -L -sS \
            --connect-timeout 10 --max-time 120 \
            --output "$body" \
            --write-out '%{http_code}' \
            -H "Authorization: Bearer ${{ env.TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "X-UIPATH-FolderPath: ${{ inputs.folder_name }}" \
            --data-urlencode "\$filter=ValueType eq 'Integer' and ${{inputs.asset_filter}}" \
            --data-urlencode "\$select=Name,IntValue" \
            "${{ env.OR_URL }}/odata/Assets/UiPath.Server.Configuration.OData.GetFiltered"
        ) || curl_rc=$?

        echo "Status Code: $status"
        echo "::group::Response body"
        if [[ -s "$body" ]] && command -v jq >/dev/null && jq -e . "$body" >/dev/null 2>&1; then
          jq -r . "$body"
        else
          cat "$body"
        fi
        echo "::endgroup::"
        
        if [[ $curl_rc -ne 0 || ${status:-0} -ge 400 ]]; then
          exit 1
        fi

    - name: GET values and build assets.values.json
      shell: bash
      run: |
        set -euo pipefail
        echo "checking release"
        body="$(mktemp)"
        trap 'rm -f "$body"' EXIT

        curl_rc=0
        status=$(
          curl -L -sS \
            --connect-timeout 10 --max-time 120 \
            --output "$body" \
            --write-out '%{http_code}' \
            -H "Authorization: Bearer ${{ env.TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "X-UIPATH-FolderPath: ${{ inputs.folder_name }}" \
            --data-urlencode "\$filter=ValueType eq 'Bool' and ${{inputs.asset_filter}}" \
            --data-urlencode "\$select=Name,BoolValue" \
            "${{ env.OR_URL }}/odata/Assets/UiPath.Server.Configuration.OData.GetFiltered"
        ) || curl_rc=$?

        echo "Status Code: $status"
        echo "::group::Response body"
        if [[ -s "$body" ]] && command -v jq >/dev/null && jq -e . "$body" >/dev/null 2>&1; then
          jq -r . "$body"
        else
          cat "$body"
        fi
        echo "::endgroup::"
        
        if [[ $curl_rc -ne 0 || ${status:-0} -ge 400 ]]; then
          exit 1
        fi
        
    - name: Output path
      id: out
      shell: bash
      run: echo "path=$GITHUB_WORKSPACE/assets.values.json" >> "$GITHUB_OUTPUT"


outputs:
  path:
    description: "Path to assets.values.json"
    value: ${{ steps.out.outputs.path }}
