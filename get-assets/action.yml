name: "get-assets"
description: "Get assets values and create json file"
inputs:
  folder_name:    { description: "X-UIPATH-FolderPath value", required: true }
  asset_filter:  { description: "", required: true }
runs:
  using: "composite"
  steps:
    - name: get string asset vals
      shell: bash
      run: |
        set -euo pipefail
        echo "Getting Strings"
        body="$(mktemp)"
        trap 'rm -f "$body"' EXIT

        curl_rc=0
        status=$(
          curl -L -sS -G \
            --connect-timeout 10 --max-time 120 \
            --output "$body" \
            --write-out '%{http_code}' \
            -H "Authorization: Bearer ${{ env.TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "X-UIPATH-FolderPath: ${{ inputs.folder_name }}" \
            --data-urlencode "\$filter=ValueType eq 'Text' and ${{inputs.asset_filter}}" \
            --data-urlencode "\$select=Name,StringValue,ValueScope,ValueType" \
            "${{ env.OR_URL }}/odata/Assets/UiPath.Server.Configuration.OData.GetFiltered"
        ) || curl_rc=$?

        echo "Status Code: $status"
        cp "$body" strings.json
        echo "::group::Response body"
        if [[ -s "$body" ]] && command -v jq >/dev/null && jq -e . "$body" >/dev/null 2>&1; then
          jq -r . "$body"
        else
          cat "$body"
        fi
        echo "::endgroup::"
        
        if [[ $curl_rc -ne 0 || ${status:-0} -ge 400 ]]; then
          exit 1
        fi

    - name: Get int asset vals
      shell: bash
      run: |
        set -euo pipefail
        echo "Getting ints"
        body="$(mktemp)"
        trap 'rm -f "$body"' EXIT

        curl_rc=0
        status=$(
          curl -L -sS -G \
            --connect-timeout 10 --max-time 120 \
            --output "$body" \
            --write-out '%{http_code}' \
            -H "Authorization: Bearer ${{ env.TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "X-UIPATH-FolderPath: ${{ inputs.folder_name }}" \
            --data-urlencode "\$filter=ValueType eq 'Integer' and ${{inputs.asset_filter}}" \
            --data-urlencode "\$select=Name,IntValue,ValueScope,ValueType" \
            "${{ env.OR_URL }}/odata/Assets/UiPath.Server.Configuration.OData.GetFiltered"
        ) || curl_rc=$?

        echo "Status Code: $status"
        cp "$body" ints.json
        echo "::group::Response body"
        if [[ -s "$body" ]] && command -v jq >/dev/null && jq -e . "$body" >/dev/null 2>&1; then
          jq -r . "$body"
        else
          cat "$body"
        fi
        echo "::endgroup::"
        
        if [[ $curl_rc -ne 0 || ${status:-0} -ge 400 ]]; then
          exit 1
        fi

    - name: Get bool asset vals
      shell: bash
      run: |
        set -euo pipefail
        echo "Getting bools"
        body="$(mktemp)"
        trap 'rm -f "$body"' EXIT

        curl_rc=0
        status=$(
          curl -L -sS -G \
            --connect-timeout 10 --max-time 120 \
            --output "$body" \
            --write-out '%{http_code}' \
            -H "Authorization: Bearer ${{ env.TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "X-UIPATH-FolderPath: ${{ inputs.folder_name }}" \
            --data-urlencode "\$filter=ValueType eq 'Bool' and ${{inputs.asset_filter}}" \
            --data-urlencode "\$select=Name,BoolValue,ValueScope,ValueType" \
            "${{ env.OR_URL }}/odata/Assets/UiPath.Server.Configuration.OData.GetFiltered"
        ) || curl_rc=$?

        echo "Status Code: $status"
        cp "$body" bools.json
        echo "::group::Response body"
        if [[ -s "$body" ]] && command -v jq >/dev/null && jq -e . "$body" >/dev/null 2>&1; then
          jq -r . "$body"
        else
          cat "$body"
        fi
        echo "::endgroup::"
        
        if [[ $curl_rc -ne 0 || ${status:-0} -ge 400 ]]; then
          exit 1
        fi
        

    - name: build json
      id: out
      shell: bash
      run: |
        set -euo pipefail
        jq -s '[.[].value[]]' strings.json ints.json bools.json > assets.json
        echo "Payload count: $(jq 'length' assets.json)"
        jq '.[0:50]' assets.json || true



    - name: Upload artifact
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
          name: assets
          path: ./assets.json

